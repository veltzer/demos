1. Write a function that creates an iterator that iterates
	using three values: start, stop, step.
	Use closures.
	Demostrate the use.
	Can you make the iterator restartable ?
2. Do an example of a debug function which only prints the
	debug message the first 3 times it is called via
	the "alert" function and then stops printing and stores
	the messages in an array. 
	Use function properties and the call-once design pattern.
	Demostrate the use of your new debug function.
	Enable easy access to all the debug messages which are
	not shown on the screen.
3. Write an object called person which has the name and age
	properties. Write setters and getters for these attributes.
	Write a method called printSelf which prints the data
	to the document.
	Now make the setters and getters be shared among all instanced
	of person.
	Use "this" and the fact that properties of type function of
	objects behave as method and get the "this" automatic variable.
4. Turn the Person code that you wrote into a full OO properly
	written object.
	Make all methods be shared via a prototype, add toString.
	Create an Emplyee class which inherits from Person.
	Demostrate it's use.
5. Shopping cart application: Write a shopping cart application where
	the list of products and the shopping cart are held as
	JavaScript client side objects.
	1. Write an Inventory object which knows about product
		names, ids, and prices.
		e.g. "basketball", 546, 34.56$ "baseball", 547, 24.56$
		The inventory represents EVERYTHING that you
		have in stock.
	2. Write a ShoppingCart object which knows about items,
		and quantities bought.
		e.g. [546, 2], [547, 2]
		which neans I'm buying 2 basketballs and two
		baseballs. It can also calculate total price.
	3. Write a table which shows everything inside the
		inventory object. Do the population of the table
		dynamically on window load.
	4. Add buttons in the table to add and remove from the
		shopping cart. Remove sould be disabled if I'm
		not buying the item.
	5. Show the shopping dynamically on the screen.
	6. If there are no items in the inventory I'm not supposed
		to be able to buy them.
6. Add Ajax to your shopping cart application.
	a. Get the initial list of product and prices from the Server.
		do this on document load.
		the data should be in JSON format.
		use a JSON parser from json.org to parse the data.
	b. Add an "update" button that will get a new list of products
		from the server and update the screen.
	c. Add a "submit" button which submits your shopping cart
		to the server via HTTP POST.
7. Calculator exercise:
	Create a calculator which does all the calculations on the
	server.

			_editable field_

			[sin] [cos] [tan] [arctan]

	Expose all java.math functions as services via DWR.
	Create a servlet that services them.
	Call all of those from your page.

	Phase 2:
	Use JQuery to show the result and make it appear slowly using
	animations.
