Now:
====
- turn the install instructions into a script.
- run checkstyle as part of ant.
- get ridd of the static jars in the static folder.
	do that by either bringing them from maven
	or by copying them from the eclipse installation.
	what ever, as long as they will not longer be source files.
- separate this project to it's own tree and away from generic demos.
	do it fresh, with no history (for obvious reasons)

Build system:
=============
- make a script that generates the eclipse variable which
	is then used by all the eclipse projects.
- get to ant build again (this time with deprecation).
- add a script to suppress the verbose info coming out of
	the checkstyle.
- run eclipse-jee and:
	- make sure everything builds
	- make sure that all projects have an src folder (even web ones).
- see that all projects build from the command line (all lint with warnings).
- get all eclipse plugins and jdic from the web (in any way).
- separate the java project as a lean and mean project on it's own.
- get ridd of deprecated APIs so that ant build with be with deprecation true.
- get ridd of the jars in '/static' and use the ones from the OS
	to reduce the size of this project.
	If I'm not happy with that then use maven to bring the jars
	to ~/.m2.
- seperate the java to it's own project (javaapi).

Extreme:
========
- add an example showing how long it takes to take locks in java.
	compare that to atomics.
- do example of memory access reordering in Java.

Swing:
======
- how do dialogs work (with thread ids).
	Show how does dialog.show() works (and how does it continue as if
	on the same thread).
- showing all threads of a java JVM with a tree model.
- disks full application with custom cell renderer.
	(I already have the begining of this).
