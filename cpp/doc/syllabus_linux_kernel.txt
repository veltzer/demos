Module 1 ‐ Linux Kernel Introduction
	o System and kernel overview
	o Kernel code specificities
	o Kernel subsystems
	o History and versioning scheme
	o Understanding the development process
	o Specific legal issues
	o Kernel user interface
Module 2 ‐ Kernel Sources
	o Getting the sources
	o Using the patch command
	o Structure of source files
	o Kernel source code browsers
Module 3 ‐ Compiling
	o Kernel configuration
	o Useful settings for embedded systems
	o Compiling
	o Generated files
	o Make commands for configuring, compiling or installing a kernel
Module 4 ‐ Booting
	o Linux system booting overview
	o The boot‐loader’s job
	o Review of Linux boot‐loaders
	o U‐boot details
	o Linux kernel booting
	o Advantages of initramfs over initrd
	o Booting parameters
	o NFS boot example
	o System startup
Module 5 ‐ Cross‐compiling
	o Kernel cross‐compiling setup
	o Ready‐made configuration files for specific architectures & boards
	o Cross‐compiling
Module 6 ‐ Basic Driver Development
	o Linux device drivers
	o A simple module
	o Programming constraints
	o Loading, unloading modules
	o Module parameters and dependencies
	o Adding sources to the kernel tree
Module 7 ‐ Linux Memory Management
	o Linux memory management  
	o Physical and virtual (kernel and user) address spaces
	o Linux memory management implementation
	o Allocating with kmalloc(), by pages and with vmalloc()
Module 8 ‐ I/O Memory
	o I/O register and memory range registration
	o I/O register and memory access
	o Read / write memory barriers
Module 9 ‐ Character Drivers
	o Device numbers
	o Getting free device numbers
	o File operations
	o Character driver registration
Module 10 ‐ Kernel Debugging
	o Using printk, /proc or /sys
	o Debugfs
	o Using an ioctl interface, gdb and kgdb
Module 11 ‐ Processes and scheduling
	o Process life
	o Timer frequency
	o Priorities and timeslices
	o Sleeping and waking up API
Module 12 ‐ Interrupts
	o Waiting for the availability of resources
	o Interrupt handler registration
	o Scheduling deferred work
Module 13 ‐ Concurrency management
	o Managing concurrent access to resources: mutexes, spinlocks
	o Atomic operations
Module 14 ‐ Advice and resources
	o Getting help and contributions
	o Bug report and patch submission to Linux developers
	o References: websites, books & international conferences
Module 15 ‐ Kernel boot‐up details
	o Detailed description of the kernel boot‐up process, from execution by the boot‐loader to the execution of the first userspace program
	o Initcalls: how to register your own initialization routines?
Module 16 ‐ Introduction to BSP development
	o Board Support Packages (BSP)
	o Porting U‐boot and the Linux kernel
	o Creating board dependent code
	o Studying code for an ARM board
Module 17 ‐ Introduction to power management
	o Supporting frequency scaling
	o CPU and board specific power management
	o Power management in device drivers
	o Control from user space
	o Saving power in the idle loop
	o Studying power management implementations in the Linux kernel
Module 18 ‐ Introduction to Linux Real‐Time Programming
	o Understanding the sources of latency in standard Linux
	o Soft real‐time solutions for Linux: improvements in Linux 2.6
	o Use the latest RT preempt patches for mainstream Linux
	o Real‐time kernel debugging.  
	o Measuring and analyzing latency
	o Hard real‐time solutions for Linux
	o RTLinux issues, the RTAI and Xenomai projects
	o Comparing with RT preempt patches
	o Real‐time offerings from commercial Linux vendors: MontaVista, TimeSys, Wind River, LynuxWorks etc.
Module 19 ‐ C library and cross‐compiling tool‐chain
	o Choosing the target C library
	o Ready to use cross‐compiling tool‐chains
	o Building a cross‐compiling tool‐chain with automated tools
	o Installing cross‐compiled libraries in the root filesystem
Module 20 ‐ Embedded system development tools
	o Commercial toolsets and distributions
	o Community toolsets (focus on Buildroot & Scratchbox)
	o How to find existing Free Software for a particular need
Module 21 ‐ BusyBox
	o Detailed Overview and features
	o Configuration, compiling and deploying
	o Saving space by implementing your own applets
Module 22 ‐ Lightweight tools for embedded systems:
	o Http and ssh servers
	o Graphical toolkits
	o Web browsers
	o Text editors
	o Precompiled packages and distributions
Module 23 ‐ Choosing file‐systems
	o File‐systems for block devices
	o Usefulness of journaled filesystems
	o Read‐only block file‐systems
	o RAM file‐systems
	o File‐systems for Memory Technology Devices (MTD)  
	o Suggestions for embedded systems
Module 24 ‐ Udev and hot‐plugging:
	o Handling hardware events from userspace
	o Creating and removing device files
	o Identifying drivers, notifying programs and users
