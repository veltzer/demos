Advanced Linux kernel debugging and performance course / Mark Veltzer
=====================================================================
This syllabus was developed for Intel due to a request for a more advanced
course which covers debugging and performance in the Linux kernel. Debugging
and performance are related topics and that is also why a single course covers
both.

Most material is not yet developed and is only in topic form but the research
on which are the more relevant topics has already been done (both from my
experience and from reading documentation and source code).

The course is divided into "large" subjects (debug, performance and more) and
each part consists of small sections where each section is not particularly long
nor depends on other sections. Sometimes it is very hard to classify a specific
topic into ONE and ONLY ONE overall subject but I did it any way so this classification
is not in any way "Holy" but does provide some overall arching structure to the course
(that is the very least that I could do - If there were no big topics the course would
have been an long list of miscelleneous topics).

- at the compiling stage
	- passing flags to the compilation process (-Wall -Werror for instance).
	- checking your coding standards (checkpatch.pl).
	- running other checkes on your code.
	- verifying context to prevent crashes
		interrupt context.
		user context.
		tasklet and kernel thread context.
	- using BUG correctly.
	- accessing module meta data at runtime.
	- calling kernel functions by name (using the kernels dynamic
		linker API).
	- how to verify the existance of kernel features in your code
		before using them.
- measuring and improving kernel boot time
	- how to measure (TSC and more).
	- how to improve (here be dragons!).
		- removing features (which ones?)
		- avoiding measuring CPU speed.
		- delaying stuff till after first program (init) run.
- locking properly
	- avoiding locking
		per CPU structures
		per client structures
		per kernel thread structures
	- atomics API
	- lockless data structures.
	- reader writer locks.
	- RCU - deep black magick.
	- correct locking (rusty russels guide).
	- how long does it take to block interrupts, anyway ?
		- a specific interrupt
		- all interrupts.
	- pre-emption disable and enable API.
	- cpu relaxing.
- debugging
	using printk
		printk format strings
		performance of printk.
		wrapping printk.
	using debugfs
	using sysfs attributes
	using /proc
	using kernel parameters
	using ddebug
	using the kernel debugger.
		over serial.
		over ethernet.
	using mutex-debug.h
	using lockdep for runtime locking corectness validation.
	using kmemcheck.
	using kmemleak.
	using kmemtrace.
	using mmiotrace.
	writing your own out of bounds detector.
	finally: reading your own code.
- Performance
	- using ftrace.
	- selecting the right memory allocator for your kernel.
	- some general timing ballpark figures.
	- profiling code in the kernel and in your module.
	- measuring time in the kernel
		TSC
		Jiffies
		getting the CPU speed, number of CPUs, cpu strength.
		cpu governors
		Best approach
	- measuring time in user space (to improve kernel).
		TSC
		gettimeofday
		RTC interfaces
	- using in kernel performance mechanisms:
		- using latency top.
		- using tracepoints.
		- using kprobes.
		- using jprobes.
	- perfomance for high speed devices using polling instead of interrupts.
	- From interrupt to user space.
	- measuring latency of synchronization mechanisms:
		spin locks
		mutexes
		waitqueues
		completions
	- controlling the affinity of interrupt handlers.
	- controlling performance in real time linux.
- Memory and resources
	understanding memory barriers.
	debugging the slab allocator.
	Using your own memory caches and debugging them.
	using devres to simplify resource handling.
- IO performance
	debugging dma.
	iostats
	using /dev/mem for io debugging
- pci
	lspci
- usb
	lsusb
	debugging the bus.
		user space tools.
		kernel tools.
		listening to messages on the usb bus.
	timing from usb interrupt to kernel.
	timing from usb interrupt to user space.
- the hard bugs
	divide and conquer to find the hardest bugs.
	using sysrq.
	analyzing kernel core dumps.
	making sure that printks reache a persistant destiny.
	how to analyze oops messages.
- miscelleneous
	overriding system calls for fun and profit.
	using gcov in the kernel to find dead code.
	debugging the hotplug system and udev.
	injecting faults using the built in fault injector.
	using kref to handle reference counting in your codes design.
