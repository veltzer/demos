Mechanisms of synchronization in general and in Linux:
======================================================
- no synchronization
	Just use a different data structure per thread and avoid synchronization at all.
	This is the best solution and the fastest.

	Caveat: On Intel the CPU caches are synchronized and so if the two CPUs access
	different memory areas which reside in the same CPU cache line (cache lines on
	Intel are usually 64 byte wide and can be seen with cat /proc/cpuinfo) then one
	CPU will delay the execution of code by another. Just make sure to have data
	structures padded enough.

	* TODO:
	show how to find the cache line width both as compile time constant and as
	runtime variable. Show how to pad a data structure correctly so that it will
	be wide enough.
	
	When should you use them?
	This is the most efficient synchronization mechanism as it has no overhead.

- atomic variables.
	__sync_fetch_and_add and the like.
	Why shouldn't you just use an int? You can, if you just increment it and do not
	necessarily want to see the value. But usually you want to do two things atomically
	like: add and fetch, fetch and add, fetch and sub, sub and fetch, test and set
	and more. If you try to do that then you run into a syncrhonization problem because
	the value that you use may be:
	- stored in a register (each CPU has it's own registers) and not even synchronized
	with memory at all.
	- stored in memory but because of synchronization got meddled with between the two
	operations that you did on it.
	- stored in memory and looks differently to the two (or more) CPUs. This cannot
	happen on Intel but can certainly happen on other platforms.

	When should you use them?
	- when the atomic operation is the only thing you want to do in the critical
	section and it satisfies you.

	This is the best synchronization mechanism if you have to have synchronization at all.

- lockless data structures and RCU mechanisms.
	This you have to do on your own.

- specialized locks like reader writer locks
	pthread_rwlock_destroy (3posix) - destroy and initialize a read-write lock object
	pthread_rwlock_init (3posix) - destroy and initialize a read-write lock object
	pthread_rwlock_rdlock (3posix) - lock a read-write lock object for reading
	pthread_rwlock_timedrdlock (3posix) - lock a read-write lock for reading
	pthread_rwlock_timedwrlock (3posix) - lock a read-write lock for writing
	pthread_rwlock_tryrdlock (3posix) - lock a read-write lock object for reading
	pthread_rwlock_trywrlock (3posix) - lock a read-write lock object for writing
	pthread_rwlock_unlock (3posix) - unlock a read-write lock object
	pthread_rwlock_wrlock (3posix) - lock a read-write lock object for writing

- spinlock.
	These are implemented using atomic variables and yielding.
	pthread_spin_destroy (3posix) - destroy or initialize a spin lock object (ADVANCED REALTIME THREADS)
	pthread_spin_init (3posix) - destroy or initialize a spin lock object (ADVANCED REALTIME THREADS)
	pthread_spin_lock (3posix) - lock a spin lock object (ADVANCED REALTIME THREADS)
	pthread_spin_trylock (3posix) - lock a spin lock object (ADVANCED REALTIME THREADS)
	pthread_spin_unlock (3posix) - unlock a spin lock object (ADVANCED REALTIME THREADS)

- futexes/mutexes (in Linux they are the same).
	futex (2) - Fast Userspace Locking system call
	pthread_mutex_destroy (3posix) - destroy and initialize a mutex
	pthread_mutex_getprioceiling (3posix) - get and set the priority ceiling of a mutex (REALTIME THREADS)
	pthread_mutex_init (3posix) - destroy and initialize a mutex
	pthread_mutex_lock (3posix) - lock and unlock a mutex
	pthread_mutex_setprioceiling (3posix) - get and set the priority ceiling of a mutex (REALTIME THREADS)
	pthread_mutex_timedlock (3posix) - lock a mutex (ADVANCED REALTIME)
	pthread_mutex_trylock (3posix) - lock and unlock a mutex
	pthread_mutex_unlock (3posix) - lock and unlock a mutex

- posix semaphores (unnamed or named).
	sem_close (3posix)   - close a named semaphore (REALTIME)
	sem_destroy (3posix) - destroy an unnamed semaphore (REALTIME)
	sem_getvalue (3posix) - get the value of a semaphore (REALTIME)
	sem_init (3posix)    - initialize an unnamed semaphore (REALTIME)
	sem_open (3posix)    - initialize and open a named semaphore (REALTIME)
	sem_overview (7)     - Overview of POSIX semaphores
	sem_post (3posix)    - unlock a semaphore (REALTIME)
	sem_timedwait (3posix) - lock a semaphore (ADVANCED REALTIME)
	sem_trywait (3posix) - lock a semaphore (REALTIME)
	sem_unlink (3posix)  - remove a named semaphore (REALTIME)
	sem_wait (3posix)    - lock a semaphore (REALTIME)

- Sys V semaphores.
	The performance of these is worse than futexes (in Linux this means regular mutexes)
	in shared memory.
	ipcrm (1posix)       - remove an XSI message queue, semaphore set, or shared memory segment identifier
	sem.h (7posix)       - XSI semaphore facility
	semctl (3posix)      - XSI semaphore control operations
	semget (3posix)      - get set of XSI semaphores
	semop (3posix)       - XSI semaphore operations
	sys_sem.h (7posix)   - XSI semaphore facility

What about synchronization between processes ?
Almost everything stated above can also be done between processes by using shared memory.
